@using MailinatorProxy.Shared.Dtos.Mails
@using MailinatorProxy.Shared.Extensions
@using MailinatorProxy.Web.ApiClients
@using System.Text.Json
@using MailinatorProxy.Web.Extensions
@using HighlightBlazor;
@using MailinatorProxy.Web.Services
@inject IMalinatorApiClient MailinatorApiClient
@inject IClipboardService ClipboardService
@inject NavigationManager NavigationManager

@if (MessageReference is not null)
{
    <MudPaper Elevation="0">
        <div class="pa-4">
            <div class="d-flex align-center">
                <MudText Typo="Typo.h5">@MessageReference.Subject</MudText>
                <MudChip Class="ml-2" T="string" Label="true" Size="Size.Small" >
                    @MessageReference.To
                </MudChip>
            </div>

            <MudStack
                Row
                AlignItems="AlignItems.End"
                Justify="Justify.SpaceBetween"
                Spacing="2">
                <EmailFrom Email="@MessageReference.Fromfull" Name="@MessageReference.From"/>
                <div>
                    <RelativeDate Date="@MessageReference.Time.ToDateTime()" DisplayTime="true"/>
                </div>
            </MudStack>
        </div>

        <div class="d-flex">
            <MudSpacer/>
            <MudToolBar>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="DeleteMessage"/>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert"
                         AriaLabel="Open user menu">
                    <MudMenuItem Label="Copy ID" Icon="@Icons.Material.Filled.ContentCopy" OnClick="CopyIdToClipboard" />
                    <MudMenuItem Label="Copy URL" Icon="@Icons.Material.Filled.Link" OnClick="CopyUrlToClipboard" />
                    <MudMenuItem Label="Copy JSON" Icon="@Icons.Material.Filled.Code" OnClick="CopyJsonToClipboard" />
                </MudMenu>
            </MudToolBar>
        </div>

        <MudTabs Border="true">
            <MudTabPanel Text="Email" Icon="@Icons.Material.Filled.Email">
                <div class="pa-4">
                    @((MarkupString)GetBody())
                </div>
            </MudTabPanel>
            <MudTabPanel Text="JSON" Icon="@Icons.Material.Filled.Code">

                <div class="pa-4">
                    <CodeHighlight CodeLanguage="json" Indent="true">
                        @_rawJsonPayload
                    </CodeHighlight>
                </div>
            </MudTabPanel>
        </MudTabs>

    </MudPaper>

}



@code {
    [Parameter, EditorRequired] public MessageDto MessageReference { get; set; }
    [Parameter, EditorRequired] public EventCallback<MessageDto> OnDelete { get; set; }

    private string _rawJsonPayload;


    protected override async Task OnInitializedAsync()
    {
        _rawJsonPayload = JsonSerializer.Serialize(MessageReference, new JsonSerializerOptions
        {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });
    }

    private string GetBody()
    {
        var body = MessageReference.GetHtmlPart()?.Body
                   ?? MessageReference.GetTextPart()?.Body
                   ?? string.Empty;

        if (string.IsNullOrWhiteSpace(body))
            return string.Empty;

        var htmlDoc = new HtmlAgilityPack.HtmlDocument();
        htmlDoc.LoadHtml(body);

        var links = htmlDoc.DocumentNode.SelectNodes("//a");
        if (links == null) return htmlDoc.DocumentNode.OuterHtml;
        foreach (var link in links)
        {
            link.SetAttributeValue("target", "_blank");
        }

        return htmlDoc.DocumentNode.OuterHtml;
    }

    private async Task CopyIdToClipboard()
    {
        if (MessageReference is null)
            return;

        await ClipboardService.CopyToClipboardAsync(MessageReference.Id);
    }

    private async Task CopyUrlToClipboard()
    {
        await ClipboardService.CopyToClipboardAsync(NavigationManager.Uri);
    }

    private async Task CopyJsonToClipboard()
    {
        if (MessageReference is null)
            return;

        await ClipboardService.CopyToClipboardAsync(_rawJsonPayload);
    }

    private async Task DeleteMessage()
    {
        await OnDelete.InvokeAsync(MessageReference);
    }
}
