@using MailinatorProxy.Web.Services
@using MailinatorProxy.Web.States
@inject IDomainService DomainService
@inject DomainState DomainState
@inject NavigationManager Nav

@if (_isChecking)
{
    <MudProgressCircular Class="ma-4" />
}
else if (!_isValid)
{
    <MudAlert Severity="Severity.Error">
        Domaine invalide. Redirectionâ€¦
    </MudAlert>
}
else
{
    @ChildContent
}

@code {
    [Parameter] public string Domain { get; set; } = default!;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool _isChecking = true;
    private bool _isValid = false;

    protected override async Task OnParametersSetAsync()
    {
        if (_isValid && DomainState.Current == Domain)
        {
            _isChecking = false;
            return;
        }


        _isChecking = true;

        if (await DomainService.IsValidAsync(Domain))
        {
            _isValid = true;
            DomainState.Set(Domain);
        }
        else
        {
            _isValid = false;

            var fallback = await DomainService.GetFirstAsync();
            if (fallback is not null && fallback.Name != Domain)
            {
                // Get the current URI and split it into segments
                var uri = Nav.ToAbsoluteUri(Nav.Uri);
                var segments = uri.AbsolutePath.Split("/", StringSplitOptions.RemoveEmptyEntries);

                // We rebuild the path with the fallback domain
                var newSegments = new[] { fallback.Name }.Concat(segments.Skip(1));
                var newPath = "/" + string.Join("/", newSegments);

                Nav.NavigateTo(newPath);
                return;
            }
        }

        _isChecking = false;
    }
}
