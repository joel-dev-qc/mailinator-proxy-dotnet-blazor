@using MailinatorProxy.Shared.Dtos.Mails
@using MailinatorProxy.Shared.Extensions
@using System.Text.Json
@using System.Text.RegularExpressions
@using MailinatorProxy.Web.Extensions
@using HighlightBlazor;
@using MailinatorProxy.Web.ApiClients
@using MailinatorProxy.Web.Services
@using MailinatorProxy.Web.States
@using Microsoft.Extensions.Localization
@inject IClipboardService ClipboardService
@inject NavigationManager NavigationManager
@inject IMalinatorApiClient MailinatorApiClient
@inject MailReadState MailReadStateService
@inject InboxFilterState InboxFilterState
@inject IStringLocalizer<InboxDetails> L

@if (_isLoading)
{
    <MudPaper Class="pa-4">
        <MudSkeleton Height="40px" Width="80%" Class="mb-2" />
        <MudSkeleton Height="30px" Width="60%" Class="mb-1" />
        <MudSkeleton Height="300px" Width="100%" />
    </MudPaper>
}
else if (_message is null)
{
    <MudAlert Severity="Severity.Error">@L["LoadMessage_Error"]</MudAlert>
    <MudButton Variant="Variant.Text" OnClick="LoadMessageAsync">@L["Retry_Button"]</MudButton>
}
else if (_errorMessage is not null)
{
    <MudPaper Class="pa-4">
        <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
        <MudButton OnClick="LoadMessageAsync" Variant="Variant.Filled" Color="Color.Primary">@L["Retry_Button"]</MudButton>
    </MudPaper>
}
else
{
    <MudPaper>
        <div class="pa-4">
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="OnBack"/>
            </MudStack>
        </div>
        <MudPaper Elevation="0">
            <div class="pa-4">
                <div class="d-flex flex-wrap align-center mb-4">
                    <MailToLabel FullEmail="@($"{_message.To}@{Domain}")" Identifier="@_message.To" Size="Size.Medium"  />
                    <MudText Typo="Typo.h5">@_message.Subject</MudText>
                </div>

                <MudStack Row AlignItems="AlignItems.End" Justify="Justify.SpaceBetween" Spacing="2">
                    <EmailFrom Email="@_message.Fromfull" Name="@_message.From"/>
                    <div>
                        <RelativeDate Date="@_message.Time.ToDateTime()" DisplayTime="true"/>
                    </div>
                </MudStack>
            </div>

            <div class="d-flex">
                <MudSpacer/>
                <MudToolBar>
                    <SetMailFavorite Domain="@Domain" Identifier="@_message.To" />

                    <MudTooltip Text="@L["Delete_Tooltip"]">
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="DeleteMessage" />
                    </MudTooltip>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="@L["UserMenu_AriaLabel"]">
                        <MudMenuItem Label="@L["CopyId_MenuItem"]" Icon="@Icons.Material.Filled.ContentCopy" OnClick="CopyIdToClipboard"/>
                        <MudMenuItem Label="@L["CopyUrl_MenuItem"]" Icon="@Icons.Material.Filled.Link" OnClick="CopyUrlToClipboard"/>
                        <MudMenuItem Label="@L["CopyJson_MenuItem"]" Icon="@Icons.Material.Filled.Code" OnClick="CopyJsonToClipboard"/>
                    </MudMenu>
                </MudToolBar>
            </div>

            <MudTabs Border="true">
                <MudTabPanel Text="@L["TabPanel_Email"]" Icon="@Icons.Material.Filled.Email">
                    <div class="pa-4">
                        <iframe
                            srcdoc="@_mailBody"
                            sandbox="allow-same-origin"
                            style="width: 100%; height: 60vh; border: none; display: block;"
                        ></iframe>
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="@L["TabPanel_Links"]" Icon="@Icons.Material.Filled.Link">
                    <div class="pa-4">
                        @if (_message is not null)
                        {
                            <MudSimpleTable Hover="true" Style="table-layout: fixed; width: 100%;">
                                <colgroup>
                                    <col style="width: 40%;" />
                                    <col style="width: 60%;" />
                                </colgroup>
                                <thead>
                                <tr>
                                    <th>@L["LinksTable_NameHeader"]</th>
                                    <th>@L["LinksTable_LinkHeader"]</th>
                                </tr>
                                </thead>
                                <tbody>
                                @if (_links.Any())
                                {

                                    @foreach (var link in _links)
                                    {
                                        <tr>
                                            <td>
                                                @if (string.IsNullOrEmpty(link.link))
                                                {
                                                    <MudText Typo="Typo.body1">@L["LinksTable_NoName"]</MudText>
                                                }
                                                else
                                                {
                                                    <MudText Typo="Typo.body1">@link.name</MudText>
                                                }
                                            </td>
                                            <td>
                                                <CopyContent Content="@link.link">
                                                    <MudLink Target="_blank" Href="@link.link" rel="noopener noreferrer">@link.link</MudLink>
                                                </CopyContent>
                                            </td>
                                        </tr>
                                    }
                                }
                                </tbody>

                            </MudSimpleTable>

                        }
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="@L["TabPanel_Json"]" Icon="@Icons.Material.Filled.Code">
                    <div class="pa-4">
                        <CodeHighlight CodeLanguage="json" Indent="true">
                            @_rawJsonPayload
                        </CodeHighlight>
                    </div>
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
    </MudPaper>
}

@code {
    [Parameter, EditorRequired] public string Domain { get; set; } = string.Empty;
    [Parameter, EditorRequired] public string MailId { get; set; } = string.Empty;
    [Parameter] public EventCallback OnBack { get; set; }
    [Parameter] public EventCallback<MessageDto> OnDeleteMessage { get; set; }

    private MessageDto? _message;
    private string _rawJsonPayload = string.Empty;
    private string? _errorMessage;
    private bool _isLoading = true;
    private string _mailBody = string.Empty;
    private List<(string name, string link)> _links = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadMessageAsync();
    }

    private async Task LoadMessageAsync()
    {
        _isLoading = true;
        _errorMessage = null;
        _message = null;

        try
        {
            var inbox = string.IsNullOrWhiteSpace(InboxFilterState.CurrentInbox) ? "*" : InboxFilterState.CurrentInbox;

            await MailReadStateService.MarkAsReadAsync(Domain, MailId);
            var response = await MailinatorApiClient.GetMailByIdAsync(Domain, inbox, MailId);
            _message = response.Message;

            _rawJsonPayload = JsonSerializer.Serialize(response.Message, new JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });

            SetBody();
            SetBodyLinks();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

        _isLoading = false;
    }



    private void SetBody()
    {
        var body = _message?.GetHtmlPart()?.Body
                   ?? _message?.GetTextPart()?.Body
                   ?? string.Empty;

        if (string.IsNullOrWhiteSpace(body))
            return;

        var htmlDoc = new HtmlAgilityPack.HtmlDocument();
        htmlDoc.LoadHtml(body);

        var links = htmlDoc.DocumentNode.SelectNodes("//a");
        if (links != null)
        {
            foreach (var link in links)
            {
                link.SetAttributeValue("target", "_blank");
                link.SetAttributeValue("rel", "noopener noreferrer");
            }
        }

        _mailBody = htmlDoc.DocumentNode.OuterHtml;
    }

    private void SetBodyLinks()
    {
        _links.Clear();

        var htmlBody = _message?.GetHtmlPart()?.Body;
        if (!string.IsNullOrEmpty(htmlBody))
        {
            var links = htmlBody.GetLinksFromHtml();
            _links.AddRange(links);

            return;
        }

        var textBody = _message?.GetTextPart()?.Body;
        if (!string.IsNullOrEmpty(textBody))
        {
            var links = htmlBody.GetLinksFromText();
            _links.AddRange(links);
        }
    }

    private async Task CopyIdToClipboard()
    {
        if (_message is null) return;
        await ClipboardService.CopyToClipboardAsync(_message.Id);
    }

    private async Task CopyUrlToClipboard()
    {
        await ClipboardService.CopyToClipboardAsync(NavigationManager.Uri);
    }

    private async Task CopyJsonToClipboard()
    {
        if (_message is null) return;
        await ClipboardService.CopyToClipboardAsync(_rawJsonPayload);
    }

    private async Task DeleteMessage()
    {

        if (_message is null) return;
        await OnDeleteMessage.InvokeAsync(_message);
        await OnBack.InvokeAsync();
    }
}
