@page "/{Domain}/Inbox"
@page "/{Domain}/Inbox/{MailId}"
@using MailinatorProxy.Shared.Dtos.Mails
@using MailinatorProxy.Web.ApiClients
@using MailinatorProxy.Web.Components.Inbox
@using MailinatorProxy.Web.Components
@using MailinatorProxy.Web.Services
@using MailinatorProxy.Web.States
@using Microsoft.Extensions.Localization
@inject MailReadState MailReadState
@inject IMalinatorApiClient MailinatorApiClient
@inject NavigationManager NavigationManager
@inject IBreadcrumbService BreadcrumbService
@inject IStringLocalizer<InboxPage> L
@inject IInboxDataService InboxDataService

<DomainGuard Domain="@Domain">
    <PageHeader PageTitle="@GetPageTitle()" BreadcrumbItems="@BreadcrumbService.GetInboxBreadcrumbs(Domain, MailId)"/>

    @if (string.IsNullOrEmpty(MailId))
    {
        <InboxList Domain="@Domain" OnSelectMessage="OnSelectMessage" OnDeleteMessage="OnDeleteMessage" />
    }
    else
    {
        <InboxDetails Domain="@Domain" MailId="@MailId" OnBack="GoBackToList" OnDeleteMessage="OnDeleteMessage" />
    }
</DomainGuard>

@code {
    [Parameter] public string Domain { get; set; } = string.Empty;
    [Parameter] public string? MailId { get; set; }

    private void OnSelectMessage(string mailId)
    {
        NavigationManager.NavigateTo($"/{Domain}/Inbox/{mailId}");
    }

    private void GoBackToList()
    {
        NavigationManager.NavigateTo($"/{Domain}/Inbox");
    }

    private async Task OnDeleteMessage(MessageDto message)
    {
        await InboxDataService.DeleteMessageAsync(Domain, message.To, message.Id);
        StateHasChanged();
    }

    private string GetPageTitle()
    {
        return string.IsNullOrEmpty(MailId)
            ? L["InboxPage_InboxTitle"]
            : L["InboxPage_DetailsTitle"];
    }
}
