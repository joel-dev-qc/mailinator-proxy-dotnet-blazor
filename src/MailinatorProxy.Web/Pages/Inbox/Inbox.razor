@page "/{Domain}/Inbox2"
@page "/{Domain}/Inbox2/{MailId}"
@using MailinatorProxy.Shared.Dtos.Mails
@using MailinatorProxy.Web.ApiClients
@using MailinatorProxy.Web.Components
@using MailinatorProxy.Web.Extensions
@using MailinatorProxy.Web.Services
@using MailinatorProxy.Web.States
@inject IMalinatorApiClient MailinatorApiClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IMailReadStateService MailReadStateService
@inject InboxFavoriteState InboxFavoriteState


<PageHeader PageTitle="@GetPageTitle()" BreadcrumbItems="GetBreadcrumbs()"/>


<DomainGuard Domain="@Domain">

    @if (!_isModeViewDetails)
    {
        <DynamicDataFilter @ref="_dynamicDataFilter" Model="_inboxFilters" OnFiltersChanged="() => _table.ReloadServerData()">
            <MudGrid Spacing="2">
                <MudItem lg="4" md="5" sm="6" xs="12">
                    <MudTextField @bind-Value="_inboxFilters.Inbox"
                                  For="() => _inboxFilters.Inbox"
                                  T="string?"
                                  Label="Inbox"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Outlined"
                                  @onfocusout="@(() => _inboxFilters.Inbox = GetCurrentInbox())"
                                  AdornmentIcon="@Icons.Material.Filled.Undo"
                                  Adornment="@(_inboxFilters.Inbox != "*" ? Adornment.End : Adornment.None)"
                                  AdornmentAriaLabel="All inboxes"
                                  OnAdornmentClick="@(() => OnInboxToFiltersChanged("*"))"
                    ></MudTextField>

                </MudItem>
                <MudItem lg="12" md="12" sm="12" xs="12">
                    <div class="d-flex flex-wrap gap-2 py-4">
                        @foreach (var favorite in _mailToFavorites)
                        {
                            <MudChip T="string"
                                     Size="Size.Medium"
                                     OnClose="@(() => InboxFavoriteState.ToggleFavoriteAsync(Domain, favorite))"
                                     CloseIcon="@Icons.Material.Filled.Close"
                                     Icon="@Icons.Material.Filled.Star"
                                     OnClick="() => OnInboxToFiltersChanged(favorite)">@favorite</MudChip>
                        }
                    </div>

                </MudItem>

            </MudGrid>
        </DynamicDataFilter>
    }

    <MudPaper>
        <div class="pa-2">
            @if (_isModeViewDetails)
            {
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="GoBackToList"/>
                    <MudText Typo="Typo.h6">Message Details</MudText>
                </MudStack>
            }
            else
            {
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Wrap="Wrap.Wrap">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="_table.ReloadServerData"/>

                    <MudSpacer/>


                </MudStack>

            }


        </div>

        @if (_selectedMessage is null)
        {
            <MudTable ServerData="ServerReload"
                      Hover="true"
                      @ref="_table"
                      Elevation="2"
                      T="MessageDto"
                      RowClassFunc="GetRowClass"
                      OnRowClick="OnSelectMessageEvent">

                <RowTemplate>
                    <MudTd Class="align-content-start">

                        <MudText Typo="Typo.body1" Class="bold">@context.From</MudText>
                    </MudTd>

                    <MudTd Class="align-content-start">
                        <div class="d-flex flex-wrap">

                            <MailToLabel FullEmail="@($"{context.To}@{context.Domain}")" Identifier="@context.To"
                                         Size="Size.Small" Class="mr-2" Style="margin-top:-1px;"/>
                            <MudText Typo="Typo.body1" Class="bold">@context.Subject</MudText>
                        </div>
                    </MudTd>

                    <MudTd Class="align-content-start">
                        <MudText Typo="Typo.body1" Class="bold">
                            <RelativeDate Date="@context.Time.ToDateTime()"/>
                        </MudText>
                    </MudTd>

                    <MudTd Class="align-content-start">
                        <div class="d-flex justify-end gap-2">

                            <SetMailFavorite Domain="@context.Domain" Identifier="@context.To" Size="Size.Small"/>
                            <MudTooltip Text="Delete">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Default"
                                               Size="Size.Small"
                                               OnClick="@(e => DeleteMessage(context))"/>
                            </MudTooltip>
                        </div>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
        }
        else
        {
            <MailDetails MessageReference="_selectedMessage" OnDelete="DeleteAndGoBack" Domain="@Domain"/>
        }

    </MudPaper>
</DomainGuard>

@code {
    [Parameter]
    public string Domain { get; set; } = string.Empty;
    [Parameter]
    public string? MailId { get; set; }

    private string? _lastMailId;
    private List<string> _mailToFavorites = [];
    private InboxFilters _inboxFilters = new();
    private IDisposable? _locationChangedRegistration;

    private MudTable<MessageDto> _table;
    private bool _isLoading = true;
    private MessageDto? _selectedMessage;
    private bool _isModeViewDetails = false;
    private Dictionary<string, bool> _readStates = new();
    private DynamicDataFilter _dynamicDataFilter;

    protected override async Task OnInitializedAsync()
    {
        await InboxFavoriteState.InitializeAsync(Domain);
        RefreshMailToFavorites();
        InboxFavoriteState.OnChanged += HandleOnFavoriteChanged;

        _locationChangedRegistration = NavigationManager.RegisterLocationChangingHandler(OnLocationChangingAsync);
    }


    protected override async Task OnParametersSetAsync()
    {
        _isLoading = false;

        if (!string.IsNullOrEmpty(MailId) && _selectedMessage == null)
        {
            _lastMailId = MailId;
            await LoadMailDetails(MailId);
            _isModeViewDetails = true;
        }
    }

    private async ValueTask OnLocationChangingAsync(LocationChangingContext context)
    {
        var uri = new Uri(context.TargetLocation);
        var segments = uri.Segments
            .Select(s => s.Trim('/'))
            .Where(x => !string.IsNullOrEmpty(x))
            .ToArray();

        // Ex: /domain/inbox ou /domain/inbox/mailId
        if (segments.Length >= 2 && segments[1].Equals("Inbox", StringComparison.OrdinalIgnoreCase))
        {
            var domain = segments[0];
            var mailId = segments.Length >= 3 ? segments[2] : null;

            // Dont load again if the mailId is the same
            if (_lastMailId == mailId)
                return;

            _lastMailId = mailId;

            if (!string.IsNullOrEmpty(mailId))
            {
                await LoadMailDetails(mailId);
                _isModeViewDetails = true;
            }
            else
            {
                _selectedMessage = null;
                _isModeViewDetails = false;
            }

            StateHasChanged();
        }
    }


    private async Task<TableData<MessageDto>> ServerReload(TableState state, CancellationToken token)
    {
        var result = await MailinatorApiClient.GetMailInboxAsync(Domain, GetCurrentInbox());

        _readStates = new Dictionary<string, bool>();
        foreach (var msg in result.Messages)
        {
            _readStates[msg.Id] = await MailReadStateService.IsReadAsync(Domain, msg.Id);
        }

        return new TableData<MessageDto>()
        {
            Items = result.Messages,
            TotalItems = result.Messages.Count
        };
    }

    private async Task LoadMailDetails(string messageId)
    {
        await MailReadStateService.MarkAsReadAsync(Domain, messageId);

        var response = await MailinatorApiClient.GetMailByIdAsync(Domain, GetCurrentInbox(), messageId);
        _selectedMessage = response.Message;
        _isModeViewDetails = true;


        var expectedUrl = $"/{Domain}/Inbox/{messageId}";
        if (NavigationManager.Uri != NavigationManager.ToAbsoluteUri(expectedUrl).ToString())
        {
            NavigationManager.NavigateTo(expectedUrl, replace: false);
        }
    }

    private async Task OnSelectMessageEvent(TableRowClickEventArgs<MessageDto> selectedMessage)
    {
        if (selectedMessage.Item is { } messageDto)
        {
            await LoadMailDetails(messageDto.Id);
        }

        StateHasChanged();
    }

    private async Task DeleteMessage(MessageDto message)
    {
        await MailinatorApiClient.DeleteMailByIdAsync(Domain, GetCurrentInbox(), message.Id);
        await MailReadStateService.RemoveAsync(Domain, message.Id);
        await _table.ReloadServerData();
        Snackbar.Add("Message deleted successfully.", Severity.Info);
    }

    private async Task DeleteAndGoBack(MessageDto message)
    {
        await DeleteMessage(message);
        GoBackToList();
    }

    private void GoBackToList()
    {
        _selectedMessage = null;
        _isModeViewDetails = false;

        var basePath = $"/{Domain}/Inbox";
        NavigationManager.NavigateTo(basePath, replace: false);
    }


    private string GetRowClass(MessageDto message, int arg2)
    {
        var readClass = _readStates.TryGetValue(message.Id, out var isRead) && !isRead
            ? "unread-row"
            : string.Empty;

        return $"cursor-pointer {readClass}";
    }


    private void HandleOnFavoriteChanged(string identifier)
    {
        RefreshMailToFavorites();
        InvokeAsync(StateHasChanged);
    }

    private void RefreshMailToFavorites()
    {
        _mailToFavorites = InboxFavoriteState.GetAllFavorites(Domain).ToList();
    }

    private void OnInboxToFiltersChanged(string mailTo)
    {
        _inboxFilters.Inbox = mailTo;
        _dynamicDataFilter.NotifyChanged(nameof(InboxFilters.Inbox));
    }

    public void Dispose()
    {
        InboxFavoriteState.OnChanged -= HandleOnFavoriteChanged;
        _locationChangedRegistration?.Dispose();
    }

    private string GetCurrentInbox()
    {
        return string.IsNullOrEmpty(_inboxFilters.Inbox) ? "*" : _inboxFilters.Inbox;
    }

    private class InboxFilters
    {
        public string Inbox { get; set; } = "*"; // Default to all inboxes
    }


    private string GetPageTitle()
    {
        return string.IsNullOrEmpty(MailId)
            ? "Inbox"
            : "Message Details";
    }

    private List<BreadcrumbItem> GetBreadcrumbs()
    {
        var items = new List<BreadcrumbItem>
        {
            new("Home", "", true, icon: Icons.Material.Filled.Home),
            new(Domain, $"/{Domain}", true, icon: Icons.Material.Filled.Domain)
        };

        if (string.IsNullOrEmpty(MailId))
        {
            items.Add(new("Inbox", null, true, icon: Icons.Material.Filled.Inbox));
        }
        else
        {
            items.Add(new("Inbox", $"/{Domain}/Inbox", true, icon: Icons.Material.Filled.Inbox));
            items.Add(new("Details", null, false, icon: Icons.Material.Filled.Email));
        }

        return items;
    }
}
