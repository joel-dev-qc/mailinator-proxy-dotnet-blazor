@page "/{Domain}/Inbox"
@using MailinatorProxy.Shared.Dtos.Mails
@using MailinatorProxy.Web.ApiClients
@using MailinatorProxy.Web.Components
@using MailinatorProxy.Web.Extensions
@inject IMalinatorApiClient MailinatorApiClient

<PageHeader PageTitle="Inbox" BreadcrumbItems="@(new List<BreadcrumbItem>
                                              {
                                                  new("Home", "home", true, icon: Icons.Material.Filled.Home),
                                                  new(@Domain, "/{Domain}", true, icon: Icons.Material.Filled.Domain),
                                                  new("Inbox", null, true, icon: Icons.Material.Filled.Inbox)
                                              })"/>


<DomainGuard Domain="@Domain">



    <MudPaper>
        <div class="pa-4">
            @if (_isModeViewDetails)
            {
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="GoBackToList"/>
                    <MudText Typo="Typo.h6">Message Details</MudText>
                </MudStack>
            }
            else
            {
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="GoBackToList"/>
                </MudStack>
            }


        </div>

    </MudPaper>

    @if (_selectedMessage is null)
    {
        <MudTable ServerData="ServerReload"
                  Hover="true"
                  @ref="_table"
                  Elevation="2"
                  T="MessageDto"
                  RowClass="cursor-pointer"
                  OnRowClick="OnSelectMessageEvent">

            <HeaderContent>
                <MudTh>
                    From
                </MudTh>
                <MudTh>
                    Subject
                </MudTh>
                <MudTh>
                    To
                </MudTh>
                <MudTh>
                    Date
                </MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd Class="align-content-start">

                    <MudText Typo="Typo.body1" Class="bold">@context.From</MudText>
                </MudTd>
                <MudTd Class="align-content-start">
                    <MudText Typo="Typo.body1" Class="bold">@context.Subject</MudText>
                </MudTd>
                <MudTd Class="align-content-start">
                    <MudText Typo="Typo.body1" Class="bold">@($"{context.To}@{context.Domain}")</MudText>
                </MudTd>

                <MudTd Class="align-content-start">
                    <MudText Typo="Typo.body1" Class="bold">
                        <RelativeDate Date="@context.Time.ToDateTime()"/>
                    </MudText>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudPaper Class="">
            <div class="pa-4">
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="GoBackToList"/>
                    <MudText Typo="Typo.h6">Message Details</MudText>
                </MudStack>
            </div>
            <MudDivider Class="my-2"/>
            <MailDetails MessageReference="_selectedMessage"/>
        </MudPaper>
    }

</DomainGuard>

@code {
    [Parameter]
    public string Domain { get; set; } = string.Empty;

    private MudTable<MessageDto> _table;
    private bool _isLoading = true;
    private MessageDto? _selectedMessage;
    private bool _isModeViewDetails = false;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = false;
    }


    private async Task<TableData<MessageDto>> ServerReload(TableState state, CancellationToken token)
    {
        var result = await MailinatorApiClient.GetMailInboxAsync("private", "*");

        return new TableData<MessageDto>()
        {
            Items = result.Messages,
            TotalItems = result.Messages.Count
        };
    }

    private async Task LoadMailDetails(string messageId)
    {
        var response = await MailinatorApiClient.GetMailByIdAsync("private", "*", messageId);
        _selectedMessage = response.Message;
    }

    private async Task OnSelectMessageEvent(TableRowClickEventArgs<MessageDto> selectedMessage)
    {
        if (selectedMessage.Item is { } messageDto)
        {
            await LoadMailDetails(messageDto.Id);
        }

        StateHasChanged();
    }

    private void GoBackToList()
    {
        _selectedMessage = null;
    }

}
