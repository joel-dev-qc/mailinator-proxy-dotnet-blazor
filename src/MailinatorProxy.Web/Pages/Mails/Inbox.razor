@page "/{Domain}/Inbox"
@page "/{Domain}/Inbox/{MailId}"
@using MailinatorProxy.Shared.Dtos.Mails
@using MailinatorProxy.Web.ApiClients
@using MailinatorProxy.Web.Components
@using MailinatorProxy.Web.Extensions
@inject IMalinatorApiClient MailinatorApiClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<style>
    .row-hover-actions {
        position: relative;
    }

    .actions-section {
        opacity: 0;
        transition: opacity 0.2s ease-in-out;
    }

    tr:hover .actions-section {
        opacity: 1;
    }
</style>

<PageHeader PageTitle="Inbox" BreadcrumbItems="@(new List<BreadcrumbItem>
                                              {
                                                  new("Home", "home", true, icon: Icons.Material.Filled.Home),
                                                  new(@Domain, "/{Domain}", true, icon: Icons.Material.Filled.Domain),
                                                  new("Inbox", null, true, icon: Icons.Material.Filled.Inbox)
                                              })"/>


<DomainGuard Domain="@Domain">



    <MudPaper>
        <div class="pa-2">
            @if (_isModeViewDetails)
            {
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="GoBackToList"/>
                    <MudText Typo="Typo.h6">Message Details</MudText>
                </MudStack>
            }
            else
            {
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="_table.ReloadServerData"/>
                </MudStack>
            }


        </div>

        @if (_selectedMessage is null)
        {
            <MudTable ServerData="ServerReload"
                      Hover="true"
                      @ref="_table"
                      Elevation="2"
                      T="MessageDto"
                      RowClass="cursor-pointer"
                      OnRowClick="OnSelectMessageEvent">

                <HeaderContent>
                    <MudTh>
                        From
                    </MudTh>
                    <MudTh>
                        Subject
                    </MudTh>
                    <MudTh>
                        To
                    </MudTh>
                    <MudTh>
                        Date
                    </MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class="align-content-start">

                        <MudText Typo="Typo.body1" Class="bold">@context.From</MudText>
                    </MudTd>
                    <MudTd Class="align-content-start">
                        <MudText Typo="Typo.body1" Class="bold">@context.Subject</MudText>
                    </MudTd>
                    <MudTd Class="align-content-start">
                        <MudText Typo="Typo.body1" Class="bold">@($"{context.To}@{context.Domain}")</MudText>
                    </MudTd>

                    <MudTd Class="align-content-start">
                        <MudText Typo="Typo.body1" Class="bold">
                            <RelativeDate Date="@context.Time.ToDateTime()"/>
                        </MudText>



                    </MudTd>
                    <MudTd>
                        <div class="actions-section" @onclick:stopPropagation="true" @onclick:preventDefault="true" >

                            <MudTooltip Text="Delete">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(e => DeleteMessage(context))" />
                            </MudTooltip>
                        </div>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
        }
        else
        {
            <MailDetails MessageReference="_selectedMessage" OnDelete="DeleteAndGoBack"/>
        }

    </MudPaper>



</DomainGuard>

@code {
    [Parameter]
    public string Domain { get; set; } = string.Empty;
    [Parameter]
    public string? MailId { get; set; }

    private MudTable<MessageDto> _table;
    private bool _isLoading = true;
    private MessageDto? _selectedMessage;
    private bool _isModeViewDetails = false;

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = false;

        if (!string.IsNullOrEmpty(MailId) && _selectedMessage == null)
        {
            await LoadMailDetails(MailId);
            _isModeViewDetails = true;
        }
    }


    private async Task<TableData<MessageDto>> ServerReload(TableState state, CancellationToken token)
    {
        var result = await MailinatorApiClient.GetMailInboxAsync(Domain, "*");

        return new TableData<MessageDto>()
        {
            Items = result.Messages,
            TotalItems = result.Messages.Count
        };
    }

    private async Task LoadMailDetails(string messageId)
    {
        var response = await MailinatorApiClient.GetMailByIdAsync(Domain, "*", messageId);
        _selectedMessage = response.Message;
        _isModeViewDetails = true;

        var newPath = $"/{Domain}/Inbox/{messageId}";
        NavigationManager.NavigateTo(newPath, replace: false);
    }

    private async Task OnSelectMessageEvent(TableRowClickEventArgs<MessageDto> selectedMessage)
    {
        if (selectedMessage.Item is { } messageDto)
        {
            await LoadMailDetails(messageDto.Id);
        }

        StateHasChanged();
    }

    private async Task DeleteMessage(MessageDto message)
    {
        await MailinatorApiClient.DeleteMailByIdAsync(Domain, "*", message.Id);
        await _table.ReloadServerData();
        Snackbar.Add("Message deleted successfully.", Severity.Info);
    }

    private async Task DeleteAndGoBack(MessageDto message)
    {
        await DeleteMessage(message);
        GoBackToList();
    }

    private void GoBackToList()
    {
        _selectedMessage = null;
        _isModeViewDetails = false;

        var basePath = $"/{Domain}/Inbox";
        NavigationManager.NavigateTo(basePath, replace: false);
    }

}
