@using MailinatorProxy.Shared.Dtos.Domains
@using MailinatorProxy.Web.Services
@using MailinatorProxy.Web.States
@inject DomainState DomainState
@inject IDomainService DomainService

<MudNavMenu>
    <MudNavLink Href="/" Icon="@Icons.Material.Filled.Home" Match="NavLinkMatch.All">Home</MudNavLink>

    @foreach(var domain in _domains)
    {
        <MudNavLink
            Href="@($"/{domain.Name}/Inbox")"
            Match="NavLinkMatch.All"
            Icon="@Icons.Material.Filled.Domain">
            Inbox - @GetShortDomainName(domain.Name)
        </MudNavLink>
    }

</MudNavMenu>

@code {
    private bool _hasSelectedDomain = false;
    private List<DomainDto> _domains = new List<DomainDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDomainsAsync();
        DomainState.OnChanged += HandleDomainChanged;
        UpdateDomainFlag();
    }

    private void HandleDomainChanged()
    {
        InvokeAsync(StateHasChanged); // forcer re-render
    }

    private void UpdateDomainFlag()
    {
        _hasSelectedDomain = !string.IsNullOrEmpty(DomainState.Current);
    }

    private async Task LoadDomainsAsync()
    {
        _domains = await DomainService.GetDomainsAsync();
    }

    public void Dispose()
    {
        DomainState.OnChanged -= HandleDomainChanged;
    }

    private string GetShortDomainName(string? domain)
    {
        if (string.IsNullOrEmpty(domain))
        {
            return string.Empty;
        }

        // remove "testinator.com"
        if (domain.EndsWith(".testinator.com", StringComparison.OrdinalIgnoreCase))
        {
            return domain.Substring(0, domain.Length - ".testinator.com".Length);
        }

        return domain;
    }
}
